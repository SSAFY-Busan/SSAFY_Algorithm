# 유기농 배추

# 차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면
# 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다.
# 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, # 어떤 배추에 배추흰지렁이가
# 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.
# 한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.
# 한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가
# 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지
# 알 수 있다. 예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.
# 0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

# 입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해
# 첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 그리고 배추가 심어져
# 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1),
# Y(0 ≤ Y ≤ N-1)가 주어진다. 두 배추의 위치가 같은 경우는 없다.
from collections import deque

dr = [1, 0, -1, 0]                      # 하좌상우
dc = [0, -1, 0, 1]


def bfs(r, c):                                                     # bfs 함수
    queue = deque()                                                # q
    queue.append((r, c))                                           # q 에 배추 추가
    while queue:                                                   # q 가 있으면
        r, c = queue.popleft()                                     # pop 하고
        for d in range(4):                                         # 방향 정해서
            nr = r + dr[d]
            nc = c + dc[d]
            if 0 <= nr < N and 0 <= nc < M and land[nr][nc] == 1:  # 값이 1 일때
                land[nr][nc] = 0                                   # 0으로 바꾸고
                queue.append((nr, nc))                             # q 에 추가 하고


T = int(input())                                                   # case 입력
for tc in range(T):                                                # case 반복
    M, N, K = map(int, input().split())                            # 땅 크기랑 배추 위치
    land = [[0]*M for _ in range(N)]                               # 배열 생성
    for i in range(K):                                             # 배추 입력
        x, y = map(int, input().split())
        land[y][x] = 1                                             # 땅에 배추 표시
    cnt = 0                                                        # 지렁이 수
    for i in range(N):                                             # 전체 탐색
        for j in range(M):
            if land[i][j] == 1:                                    # 배추 있으면
                bfs(i, j)                                          # bfs 돌리고
                land[i][j] = 0                                     # 이배추자리는 0으로 바꾸고
                cnt += 1                                           # 지렁이 수 1 증가
    print(cnt)